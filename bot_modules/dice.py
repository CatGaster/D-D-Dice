import discord
from discord import app_commands
from discord.ext import commands
from discord.ui import Button, View, Modal, TextInput
import random
import re
from bot_modules.character import get_user_stats

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
def roll_dice(sides, rolls=1):
    return [random.randint(1, sides) for _ in range(rolls)]

tts_enabled = False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é TTS –æ—Ç–∫–ª—é—á–µ–Ω

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
def calculate_modifier(stat_value):
    return (stat_value - 10) // 2

def setup_dice_commands(bot):
    @bot.command(name="roll_dice", aliases=["rd"])
    async def roll_dice_buttons(ctx):
        await send_dice_buttons(ctx)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã
    @app_commands.command(name="roll_dice", description="–í—ã–±–µ—Ä–∏ –∫—É–±–∏–∫ –¥–ª—è –±—Ä–æ—Å–∫–∞ üé≤")
    async def slash_roll_dice(interaction: discord.Interaction):
        class ContextShim:
            def __init__(self, interaction):
                self.author = interaction.user
                self.send = interaction.response.send_message
        
        ctx = ContextShim(interaction)
        await send_dice_buttons(ctx)

    # –ü–æ–º–æ—â—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    async def send_dice_buttons(ctx):
        global tts_enabled

        dice_buttons = [
            Button(label="1d2 üé≤", style=discord.ButtonStyle.primary, custom_id="1d2"),
            Button(label="1d4 üé≤", style=discord.ButtonStyle.primary, custom_id="1d4"),
            Button(label="1d6 üé≤", style=discord.ButtonStyle.primary, custom_id="1d6"),
            Button(label="1d8 üé≤", style=discord.ButtonStyle.primary, custom_id="1d8"),
            Button(label="1d12 üé≤", style=discord.ButtonStyle.primary, custom_id="1d12"),
            Button(label="1d20 üé≤", style=discord.ButtonStyle.primary, custom_id="1d20"),
            Button(label="–ö–∞—Å—Ç–æ–º–Ω—ã–π –∫—É–±–∏–∫", style=discord.ButtonStyle.secondary, custom_id="custom_dice"),
        ]

        tts_button = Button(
            label="–û—Ç–∫–ª—é—á–∏—Ç—å TTS üîá" if tts_enabled else "–í–∫–ª—é—á–∏—Ç—å TTS üîä",
            style=discord.ButtonStyle.danger if tts_enabled else discord.ButtonStyle.success,
            custom_id="tts_toggle",
        )

        view = View()
        for button in dice_buttons:
            view.add_item(button)
        view.add_item(tts_button)

        async def dice_button_callback(interaction: discord.Interaction):
            custom_id = interaction.data["custom_id"]
            if custom_id == "custom_dice":
                custom_modal = Modal(title="–ö–∞—Å—Ç–æ–º–Ω—ã–π –∫—É–±–∏–∫")
                sides_input = TextInput(label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–Ω–µ–π", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 10", required=False)
                rolls_input = TextInput(label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ—Å–∫–æ–≤", placeholder="–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1", required=False)
                stat_input = TextInput(label="–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°–∏–ª–∞", required=False)
                extra_dice_input = TextInput(label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—É–±–∏–∫–∏", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1d4+1d6", required=False)

                custom_modal.add_item(sides_input)
                custom_modal.add_item(rolls_input)
                custom_modal.add_item(stat_input)
                custom_modal.add_item(extra_dice_input)

                async def on_submit(modal_interaction):
                    try:
                        user_id = str(ctx.author.id)
                        user_stats = get_user_stats(user_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                        total = 0
                        result_message = ""

                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—É–±–∏–∫–∏ (4 —Å—Ç—Ä–æ–∫–∞)
                        extra_dice = extra_dice_input.value.strip() if extra_dice_input.value else ""

                        # –û—Å–Ω–æ–≤–Ω–æ–π –∫—É–±–∏–∫ (1 –∏ 2 —Å—Ç—Ä–æ–∫–∏)
                        if sides_input.value:
                            sides = int(sides_input.value)
                            rolls = int(rolls_input.value) if rolls_input.value else 1
                            results = roll_dice(sides, rolls)
                            total += sum(results)
                            result_message += f"{rolls}d{sides}: {', '.join(map(str, results))}"

                        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (3 —Å—Ç—Ä–æ–∫–∞)
                        stat_name = stat_input.value.strip().lower()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–æ–¥ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
                        modifier = 0
                        user_stats_lower = {key.lower(): value for key, value in user_stats.items()}

                        if stat_name in user_stats_lower:
                            stat_value = user_stats_lower[stat_name]
                            modifier = calculate_modifier(stat_value)
                            total += modifier

                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—É–±–∏–∫–∏ (4 —Å—Ç—Ä–æ–∫–∞)
                        if extra_dice:
                            extra_result_strings = []
                            for item in re.finditer(r"([+-]?)\s*(\d+d\d+|\d+)", extra_dice):
                                sign = item.group(1) or "+"
                                value = item.group(2)

                                if "d" in value:  # –≠—Ç–æ –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2d8
                                    extra_rolls, extra_sides = map(int, value.split("d"))
                                    extra_roll_results = roll_dice(extra_sides, extra_rolls)
                                    subtotal = sum(extra_roll_results)

                                    if sign == "-":
                                        total -= subtotal
                                        extra_result_strings.append(f"- {extra_rolls}d{extra_sides}: {', '.join(map(str, extra_roll_results))}")
                                    else:
                                        total += subtotal
                                        extra_result_strings.append(f"+ {extra_rolls}d{extra_sides}: {', '.join(map(str, extra_roll_results))}")

                                else:  # –≠—Ç–æ —á–∏—Å–ª–æ–≤–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä, +5
                                    numeric_modifier = int(value)
                                    if sign == "-":
                                        total -= numeric_modifier
                                        extra_result_strings.append(f"- {numeric_modifier}")
                                    else:
                                        total += numeric_modifier
                                        extra_result_strings.append(f"+ {numeric_modifier}")

                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—É–±–∏–∫–æ–≤
                            if extra_result_strings:
                                if result_message:
                                    result_message += " "
                                result_message += " ".join(extra_result_strings).lstrip("+ ")

                        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
                        if modifier != 0:
                            result_message += f" (+{modifier} {stat_name})" if modifier > 0 else f" ({modifier} {stat_name})"

                        # –≤—ã–≤–æ–¥
                        result_message += f" = {total}"
                        await modal_interaction.response.send_message(result_message.strip(), tts=tts_enabled)
                    except ValueError:
                        await modal_interaction.response.send_message("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!", ephemeral=True)

                custom_modal.on_submit = on_submit
                await interaction.response.send_modal(custom_modal)
            else:
                match = re.match(r"(\d+)d(\d+)", custom_id)
                if match:
                    sides = int(match.group(2))
                    rolls = int(match.group(1))
                    results = roll_dice(sides, rolls)
                    total = sum(results)

                    if rolls == 1:
                        await interaction.response.send_message(f"{custom_id}: {results[0]}", tts=tts_enabled)
                    else:
                        await interaction.response.send_message(f"{custom_id}: {', '.join(map(str, results))} = {total}", tts=tts_enabled)

        async def tts_button_callback(interaction: discord.Interaction):
            global tts_enabled
            tts_enabled = not tts_enabled
            tts_button.label = "–û—Ç–∫–ª—é—á–∏—Ç—å TTS üîá" if tts_enabled else "–í–∫–ª—é—á–∏—Ç—å TTS üîä"
            tts_button.style = discord.ButtonStyle.danger if tts_enabled else discord.ButtonStyle.success
            await interaction.response.edit_message(content="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", view=view)

        for button in dice_buttons:
            button.callback = dice_button_callback
        tts_button.callback = tts_button_callback

        await ctx.send("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–±–∏–∫ –¥–ª—è –±—Ä–æ—Å–∫–∞:", view=view)

    bot.tree.add_command(slash_roll_dice)